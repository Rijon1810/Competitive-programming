3 way DP,RECURSIVE,DP NORMAL

1.Using Recursive Way:
----------------------
_________________________________________________________________________________________________________________________________________
// A naive recursive C++ implementation
#include <bits/stdc++.h>
using namespace std;

// Returns value of Binomial Coefficient C(n, k)
int binomialCoeff(int n, int k)
{
    // Base Cases
    if (k == 0 || k == n)
        return 1;

    // Recur
    return binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k);
}


int main()
{
    int n = 5, k = 2;
    cout << "Value of C("<<n<<", "<<k<<") is " << binomialCoeff(n, k);
    return 0;
}
______________________________________________________________________________________________________________________________________



2.Using Dynamic Programming(DP)efficent:
............................
______________________________________________________________________________________________________________________________________


// C++ program for space optimized Dynamic Programming 
// Solution of Binomial Coefficient 
#include<bits/stdc++.h> 
using namespace std; 

int binomialCoeff(int n, int k) 
{ 
	int C[k+1]; 
	memset(C, 0, sizeof(C)); 

	C[0] = 1; // nC0 is 1 

	for (int i = 1; i <= n; i++) 
	{ 
		// Compute next row of pascal triangle using 
		// the previous row 
		for (int j = min(i, k); j > 0; j--) 
			C[j] = C[j] + C[j-1]; 
	} 
	return C[k]; 
} 

/* Drier program to test above function*/
int main() 
{ 
	int n = 5, k = 2; 
	printf ("Value of C(%d, %d) is %d ", 
			n, k, binomialCoeff(n, k) ); 
	return 0; 
}
______________________________________________________________________________________________________________________________________

3.Dp normal under stable :
..........................

// A Dynamic Programming based solution that uses 
// table C[][] to calculate the Binomial Coefficient 
#include<bits/stdc++.h> 
using namespace std; 

// Prototype of a utility function that 
// returns minimum of two integers 
int min(int a, int b); 

// Returns value of Binomial Coefficient C(n, k) 
int binomialCoeff(int n, int k) 
{ 
	int C[n + 1][k + 1]; 
	int i, j; 

	// Caculate value of Binomial Coefficient 
	// in bottom up manner 
	for (i = 0; i <= n; i++) 
	{ 
		for (j = 0; j <= min(i, k); j++) 
		{ 
			// Base Cases 
			if (j == 0 || j == i) 
				C[i][j] = 1; 

			// Calculate value using previously 
			// stored values 
			else
				C[i][j] = C[i - 1][j - 1] + 
						C[i - 1][j]; 
		} 
	} 

	return C[n][k]; 
} 

// A utility function to return 
// minimum of two integers 
int min(int a, int b) 
{ 
	return (a < b) ? a : b; 
} 

// Driver Code 
int main() 
{ 
	int n = 5, k = 2; 
	cout << "Value of C[" << n << "]["
		<< k << "] is " << binomialCoeff(n, k); 
} 
_______________________________________________________________________________________________________________________________________
